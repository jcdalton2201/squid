{"version":3,"file":"squid-input-mask-b67c95c6.js","sources":["../../dist/utils/stringUtils.js","../../dist/utils/maskUtil.js","../../dist/squid-input-mask/squid-input-mask.js"],"sourcesContent":["/**\r\n * Transforms kebob case strings to camel case strings\r\n * @example\r\n * // returns 'myKebobCase'\r\n * kebobToCamelCase('my-kebob-case');\r\n * @param {string} _string - the kebob-case string to transform to camelCase\r\n * @returns {string}\r\n */\r\nconst kebobToCamelCase = (_string) => {\r\n    // eslint-disable-next-line no-useless-escape\r\n    return _string.replace(/(\\-\\w)/g, word => word[1].toUpperCase());\r\n};\r\n  \r\n/** Characters that must be escaped in a string */\r\nconst escapeCharacters = '\\\\^$*+?.()|{}[]'.split('');\r\n  \r\n/**\r\n   * Splice characters into a base string and return the result\r\n   * @param {string} string - The base string\r\n   * @param {number} index - The index at which to splice\r\n   * @param {string} chars - The characters to splice into the base string\r\n   * @return { string } - A newly-spliced string\r\n   * @todo Move to string utils file\r\n   */\r\nconst splice = (string, index, chars) =>\r\n    string.slice(0, index) + chars + string.slice(index + 1);\n\nexport { escapeCharacters, kebobToCamelCase, splice };\n","import { escapeCharacters, splice } from './stringUtils.js';\n\nclass MaskUtil {\r\n    constructor(input, pattern='', controller) {\r\n        this.input = input;\r\n        this.maskPattern = pattern;\r\n        this.controller = controller;\r\n\r\n        this.numValidate = /^\\d$/;\r\n        this.stringValidate = /^[a-zA-Z]$/;\r\n        this.allValidate = /^\\w$/;\r\n\r\n        this.mask = pattern.split('').map(char => {\r\n            let validator;\r\n            if (char === 'A') {\r\n                validator = this.stringValidate;\r\n            } else if (char === '1') {\r\n                validator = this.numValidate;\r\n            } else if (char === 'e') {\r\n                validator = this.allValidate;\r\n            }\r\n            return { char, validator };\r\n        });\r\n\r\n        this.validators = this.mask.filter(charData => charData.validator);\r\n\r\n        this.placeholder = this.mask.map(char => {\r\n            if (char.validator) {\r\n                return '_';\r\n            } else {\r\n                return char.char;\r\n            }\r\n        }).join('');\r\n\r\n        /** Construct a string to be used as a pattern setting in an input component */\r\n        this.regExp = this.mask.map(entry => {\r\n            const { validator, char } = entry;\r\n            if (validator) {\r\n                switch (validator) {\r\n                case this.numValidate:\r\n                    return '\\\\d';\r\n                case this.stringValidate:\r\n                    return '[a-zA-Z]';\r\n                case this.allValidate:\r\n                    return '\\\\w';\r\n                }\r\n            } else {\r\n                if (escapeCharacters.includes(char)) {\r\n                    return `\\\\${char}`;\r\n                } else {\r\n                    return char;\r\n                }\r\n            }\r\n        }).join('');\r\n\r\n        input.pattern = this.regExp;\r\n        this.__inputKeydownMask = this.__inputKeydownMask.bind(this);\r\n        this.__inputPaste = this.__inputPaste.bind(this);\r\n\r\n        input.addEventListener('keydown', this.__inputKeydownMask);\r\n        input.addEventListener('paste', this.__inputPaste);\r\n    }\r\n\r\n    disconnect() {\r\n        this.input.removeEventListener('keydown', this.__inputKeydownMask);\r\n        this.input.removeEventListener('paste', this.__inputPaste);\r\n    }\r\n\r\n    parseRaw(data) {\r\n        data = data || '';\r\n        const filteredData = data.replace(/\\W/g, '');\r\n        if (filteredData.length === this.validators.length) {\r\n            const isValid = filteredData.split('')\r\n                .map((char, index) => !!char.match(this.validators[index].validator))\r\n                .reduce((accumulator, currentValue) => {\r\n                    if (currentValue === false) {\r\n                        return false;\r\n                    } else {\r\n                        return accumulator;\r\n                    }\r\n                });\r\n\r\n            if (!isValid) {\r\n                return false;\r\n            }\r\n            let pointer = -1;\r\n            return this.mask.map((maskObj) => {\r\n                if (maskObj.validator) {\r\n                    pointer += 1;\r\n                    return filteredData[pointer];\r\n                } else {\r\n                    return maskObj.char;\r\n                }\r\n            }).join('');\r\n        } else {\r\n            return data;\r\n        }\r\n    }\r\n\r\n    __inputKeydownMask(event) {\r\n        const { selectionStart, selectionEnd } = event.target;\r\n        const key = event.key;\r\n        const ignored = ['Backspace', 'Tab', 'Enter', 'Escape', 'ArrowLeft', 'ArrowRight', 'Shift'];\r\n        if (ignored.includes(key) || event.metaKey) {\r\n            return;\r\n        }\r\n        if (event.target.value.length >= this.mask.length) {\r\n            event.preventDefault();\r\n            return false;\r\n        }\r\n        if (selectionStart === selectionEnd) {\r\n            let index = selectionStart;\r\n            let mask = this.mask[index];\r\n            while(mask && !mask.validator && key != mask.char) {\r\n                event.target.value = splice(event.target.value, index, mask.char);\r\n                event.target.setSelectionRange(index + 1, index + 1);\r\n                mask = this.mask[index + 1];\r\n                index += 1;\r\n            }\r\n            if (mask && mask.validator) {\r\n                const match = !!key.match(mask.validator);\r\n                if (!match) {\r\n                    event.preventDefault();\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    __inputPaste(event) {\r\n        const data = event.clipboardData.getData('text/plain');\r\n        const maskedData = this.parseRaw(data);\r\n\r\n        if (maskedData === false) {\r\n            this.controller.setCustomValidity('The information entered does not follow the proper format');\r\n        } else {\r\n            this.controller.setCustomValidity('');\r\n            setTimeout(() => {\r\n                this.controller.value = maskedData;\r\n            });\r\n        }\r\n    }\r\n}\n\nexport { MaskUtil };\n","import { SquidInput } from '../squid-input/squid-input.js';\nimport { defineSquidElement } from '../utils/defineSquidElement.js';\nimport { MaskUtil } from '../utils/maskUtil.js';\nimport { emitEvent } from '../utils/squidEvents.js';\n\n/**\n * @tag squid-input-mask\n * @summary The `SquidInputMask` is functionally an `SquidInput` component with an input mask attached to enforece a particular pattern. This now serves as the base class for [SquidTelephone](../squid-telephone).\n * @prop {String} mask - The mask to apply to the input. Includes two options: alpha: `'A'` and numeric `'1'`. So a mask for a telephone might be `(111) 111-1111`. For alphanumeric characters, use the `'e'` character. Reflected as a property. **NOTE:** Updating the mask property after the element has been connected to the DOM will not create a new mask.\n * @example <squid-input-mask mask=\"(111) 111-1111\">Telephone Number</squid-input-mask>\n<squid-input-mask mask=\"1AAAA11AAAA111111\" helper=\"Format: 1AAAA11AAAA111111\">Vehicle Identification Number</squid-input-mask>\n */\nclass SquidInputMask extends SquidInput {\n    constructor(){\n        super();\n        this._value = '';\n    }\n    static get properties() {\n        console.log(super.properties);\n        return {\n            ...super.properties,\n            mask:{type:String},\n        };\n    }\n\n    async firstUpdated(args){\n        const { mask } = args;\n        this.mask = this.mask || mask;\n        this._maskUtil = new MaskUtil(this.__getInput(), this.mask, this);\n        this.pattern = this._maskUtil.regExp;\n    }\n\n    updated(changedProperties){\n        if (changedProperties.has('value')) {\n            this.addMask();\n        }\n    }\n    \n    addMask(){\n        this._value = this.value;\n        const input = this.renderRoot.querySelector('input');\n        if(this._maskUtil){\n            const parsedData = this._maskUtil.parseRaw(this._value);\n            console.log(this.value);\n            if (parsedData && this._value !== parsedData) {\n                if (input.value !== parsedData) {\n                    input.value = parsedData;\n                    this.value = parsedData;\n                    this.setCustomValidity('');\n                }\n                emitEvent('squid-change',parsedData, this);\n            } else if (!parsedData) {\n                this.value = parsedData;\n                input.value = this._value;\n                emitEvent('squid-change', this._value, this);\n                if(parsedData === false){\n                    this.setCustomValidity('The information entered does not follow the proper format'); \n                }\n            } else {\n                emitEvent('squid-change', this._value, this);\n            }\n        }\n    }\n    /**\n     * Overwrite the input event\n     * @param {Event} evt input event\n     */\n    __onInput(){\n        const input = this.renderRoot.querySelector('input');\n        const _value = input.value;\n        this.value = _value;\n        if(this._maskUtil) {\n            const parsedData = this._maskUtil.parseRaw(_value);\n            if (parsedData && _value !== parsedData) {\n                if (input.value !== parsedData) {\n                    input.value = parsedData;\n                    this.value = parsedData;\n                    this.setCustomValidity('');\n                }\n                emitEvent('squid-change',parsedData, this);\n            } else if (!parsedData) {\n                this.value = parsedData;\n                input.value = _value;\n                emitEvent('squid-change', _value, this);\n                if(parsedData === false){\n                    this.setCustomValidity('The information entered does not follow the proper format'); \n                }\n            } else {\n                emitEvent('squid-change', _value, this);\n            }\n        }\n    }\n}\ndefineSquidElement('squid-input-mask',SquidInputMask);\n\nexport { SquidInputMask };\n"],"names":["escapeCharacters","splice","string","index","chars","MaskUtil","input","pattern","controller","char","validator","charData","entry","data","filteredData","accumulator","currentValue","pointer","maskObj","event","selectionStart","selectionEnd","key","mask","maskedData","SquidInputMask","SquidInput","args","changedProperties","parsedData","emitEvent","_value","defineSquidElement"],"mappings":"iJAcA,MAAMA,EAAmB,kBAAkB,MAAM,EAAE,EAU7CC,EAAS,CAACC,EAAQC,EAAOC,IAC3BF,EAAO,MAAM,EAAGC,CAAK,EAAIC,EAAQF,EAAO,MAAMC,EAAQ,CAAC,ECvB3D,MAAME,CAAS,CACX,YAAYC,EAAOC,EAAQ,GAAIC,EAAY,CACvC,KAAK,MAAQF,EACb,KAAK,YAAcC,EACnB,KAAK,WAAaC,EAElB,KAAK,YAAc,OACnB,KAAK,eAAiB,aACtB,KAAK,YAAc,OAEnB,KAAK,KAAOD,EAAQ,MAAM,EAAE,EAAE,IAAIE,GAAQ,CACtC,IAAIC,EACJ,OAAID,IAAS,IACTC,EAAY,KAAK,eACVD,IAAS,IAChBC,EAAY,KAAK,YACVD,IAAS,MAChBC,EAAY,KAAK,aAEd,CAAE,KAAAD,EAAM,UAAAC,EAC3B,CAAS,EAED,KAAK,WAAa,KAAK,KAAK,OAAOC,GAAYA,EAAS,SAAS,EAEjE,KAAK,YAAc,KAAK,KAAK,IAAIF,GACzBA,EAAK,UACE,IAEAA,EAAK,IAEnB,EAAE,KAAK,EAAE,EAGV,KAAK,OAAS,KAAK,KAAK,IAAIG,GAAS,CACjC,KAAM,CAAE,UAAAF,EAAW,KAAAD,CAAM,EAAGG,EAC5B,GAAIF,EACA,OAAQA,EAAS,CACjB,KAAK,KAAK,YACN,MAAO,MACX,KAAK,KAAK,eACN,MAAO,WACX,KAAK,KAAK,YACN,MAAO,KACV,KAED,QAAIV,EAAiB,SAASS,CAAI,EACvB,KAAKA,IAELA,CAG3B,CAAS,EAAE,KAAK,EAAE,EAEVH,EAAM,QAAU,KAAK,OACrB,KAAK,mBAAqB,KAAK,mBAAmB,KAAK,IAAI,EAC3D,KAAK,aAAe,KAAK,aAAa,KAAK,IAAI,EAE/CA,EAAM,iBAAiB,UAAW,KAAK,kBAAkB,EACzDA,EAAM,iBAAiB,QAAS,KAAK,YAAY,CACpD,CAED,YAAa,CACT,KAAK,MAAM,oBAAoB,UAAW,KAAK,kBAAkB,EACjE,KAAK,MAAM,oBAAoB,QAAS,KAAK,YAAY,CAC5D,CAED,SAASO,EAAM,CACXA,EAAOA,GAAQ,GACf,MAAMC,EAAeD,EAAK,QAAQ,MAAO,EAAE,EAC3C,GAAIC,EAAa,SAAW,KAAK,WAAW,OAAQ,CAWhD,GAAI,CAVYA,EAAa,MAAM,EAAE,EAChC,IAAI,CAACL,EAAMN,IAAU,CAAC,CAACM,EAAK,MAAM,KAAK,WAAWN,CAAK,EAAE,SAAS,CAAC,EACnE,OAAO,CAACY,EAAaC,IACdA,IAAiB,GACV,GAEAD,CAEd,EAGD,MAAO,GAEX,IAAIE,EAAU,GACd,OAAO,KAAK,KAAK,IAAKC,GACdA,EAAQ,WACRD,GAAW,EACJH,EAAaG,CAAO,GAEpBC,EAAQ,IAEtB,EAAE,KAAK,EAAE,MAEV,QAAOL,CAEd,CAED,mBAAmBM,EAAO,CACtB,KAAM,CAAE,eAAAC,EAAgB,aAAAC,GAAiBF,EAAM,OACzCG,EAAMH,EAAM,IAElB,GAAI,EADY,CAAC,YAAa,MAAO,QAAS,SAAU,YAAa,aAAc,OAAO,EAC9E,SAASG,CAAG,GAAKH,EAAM,SAGnC,IAAIA,EAAM,OAAO,MAAM,QAAU,KAAK,KAAK,OACvC,OAAAA,EAAM,eAAc,EACb,GAEX,GAAIC,IAAmBC,EAAc,CACjC,IAAIlB,EAAQiB,EACRG,EAAO,KAAK,KAAKpB,CAAK,EAC1B,KAAMoB,GAAQ,CAACA,EAAK,WAAaD,GAAOC,EAAK,MACzCJ,EAAM,OAAO,MAAQlB,EAAOkB,EAAM,OAAO,MAAOhB,EAAOoB,EAAK,IAAI,EAChEJ,EAAM,OAAO,kBAAkBhB,EAAQ,EAAGA,EAAQ,CAAC,EACnDoB,EAAO,KAAK,KAAKpB,EAAQ,CAAC,EAC1BA,GAAS,EAEb,GAAIoB,GAAQA,EAAK,WAET,CADU,CAAC,CAACD,EAAI,MAAMC,EAAK,SAAS,EAEpC,OAAAJ,EAAM,eAAc,EACb,IAItB,CAED,aAAaA,EAAO,CAChB,MAAMN,EAAOM,EAAM,cAAc,QAAQ,YAAY,EAC/CK,EAAa,KAAK,SAASX,CAAI,EAEjCW,IAAe,GACf,KAAK,WAAW,kBAAkB,2DAA2D,GAE7F,KAAK,WAAW,kBAAkB,EAAE,EACpC,WAAW,IAAM,CACb,KAAK,WAAW,MAAQA,CACxC,CAAa,EAER,CACL,CClIA,MAAMC,UAAuBC,CAAW,CACpC,aAAa,CACT,QACA,KAAK,OAAS,EACjB,CACD,WAAW,YAAa,CACpB,eAAQ,IAAI,MAAM,UAAU,EACrB,CACH,GAAG,MAAM,WACT,KAAK,CAAC,KAAK,MAAM,CAC7B,CACK,CAED,MAAM,aAAaC,EAAK,CACpB,KAAM,CAAE,KAAAJ,CAAM,EAAGI,EACjB,KAAK,KAAO,KAAK,MAAQJ,EACzB,KAAK,UAAY,IAAIlB,EAAS,KAAK,WAAU,EAAI,KAAK,KAAM,IAAI,EAChE,KAAK,QAAU,KAAK,UAAU,MACjC,CAED,QAAQuB,EAAkB,CAClBA,EAAkB,IAAI,OAAO,GAC7B,KAAK,QAAO,CAEnB,CAED,SAAS,CACL,KAAK,OAAS,KAAK,MACnB,MAAMtB,EAAQ,KAAK,WAAW,cAAc,OAAO,EACnD,GAAG,KAAK,UAAU,CACd,MAAMuB,EAAa,KAAK,UAAU,SAAS,KAAK,MAAM,EACtD,QAAQ,IAAI,KAAK,KAAK,EAClBA,GAAc,KAAK,SAAWA,GAC1BvB,EAAM,QAAUuB,IAChBvB,EAAM,MAAQuB,EACd,KAAK,MAAQA,EACb,KAAK,kBAAkB,EAAE,GAE7BC,EAAU,eAAeD,EAAY,IAAI,GACjCA,EAQRC,EAAU,eAAgB,KAAK,OAAQ,IAAI,GAP3C,KAAK,MAAQD,EACbvB,EAAM,MAAQ,KAAK,OACnBwB,EAAU,eAAgB,KAAK,OAAQ,IAAI,EACxCD,IAAe,IACd,KAAK,kBAAkB,2DAA2D,GAMjG,CAKD,WAAW,CACP,MAAMvB,EAAQ,KAAK,WAAW,cAAc,OAAO,EAC7CyB,EAASzB,EAAM,MAErB,GADA,KAAK,MAAQyB,EACV,KAAK,UAAW,CACf,MAAMF,EAAa,KAAK,UAAU,SAASE,CAAM,EAC7CF,GAAcE,IAAWF,GACrBvB,EAAM,QAAUuB,IAChBvB,EAAM,MAAQuB,EACd,KAAK,MAAQA,EACb,KAAK,kBAAkB,EAAE,GAE7BC,EAAU,eAAeD,EAAY,IAAI,GACjCA,EAQRC,EAAU,eAAgBC,EAAQ,IAAI,GAPtC,KAAK,MAAQF,EACbvB,EAAM,MAAQyB,EACdD,EAAU,eAAgBC,EAAQ,IAAI,EACnCF,IAAe,IACd,KAAK,kBAAkB,2DAA2D,GAMjG,CACL,CACAG,EAAmB,mBAAmBP,CAAc"}