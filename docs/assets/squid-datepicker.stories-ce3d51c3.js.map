{"version":3,"file":"squid-datepicker.stories-ce3d51c3.js","sources":["../../dist/squid-datepicker/squid-datepicker.js"],"sourcesContent":["import { css, html } from 'lit';\nimport { defineSquidElement } from '../utils/defineSquidElement.js';\nimport { SquidInput } from '../squid-input/squid-input.js';\nimport '../squid-calendar/squid-calendar.js';\n\nvar css_248z = css`#container{max-width:200px}#container squid-calendar.hide{display:none}`;\n\n/**\r\n * @tag squid-datepicker\r\n * @summary The `SquidDatepicker` component is an version of input with a type of text.  \r\n * It will use the [SquidCalendar](../squid-Calendar) to display a calendar for picking a date.\r\n * @prop {String} disabled - A proxy for the input disabled attribute. Reflected as a property. \r\n * @prop {String} required - A proxy for the input required attribute. Reflected as a property. \r\n * @prop {String} autofocus - A proxy for the input autofocus attribute. Reflected as a property. \r\n * @prop {String} placeholder - A proxy for the input placeholder attribute. Reflected as a property. \r\n * @prop {String} value - Sets the input's value and emits an `squid-change` event when updated. Reflected as a property. \r\n * @prop {String} autocomplete - A proxy for the input's `autocomplete` property. Reflected as a property. \r\n * @prop {String} pattern - A RegEx to be used by the input for validation purposes. Serves as a proxy for the input's pattern property/attribute. \r\n * @event squid-change A [`CustomEvent`](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent) emitted each time the input's value is changed. Not to be confused with the browser `change` event which only fires when an input is blurred. The `detail` property contains the input's value.\r\n * @example <squid-datepicker required >This input will run validations</squid-datepicker\r\n */\r\nclass SquidDatepicker extends SquidInput {\r\n    static get styles() {\r\n        return [...super.styles, css_248z];\r\n    }\r\n    static get properties() {\r\n        return {\r\n            value: {\r\n                type: String,\r\n                reflect: true,\r\n                converter: {\r\n                    toAttribute(value) {\r\n                        if(value instanceof Date){\r\n                            return this.localization.format(value);\r\n                        } \r\n                        return value;\r\n                    },\r\n                    fromAttribute(value) {\r\n                        if(value){\r\n                            return new Date(value);\r\n                        }\r\n                        return null;\r\n                    },\r\n                },\r\n            },\r\n        };\r\n    }\r\n    constructor() {\r\n        super();\r\n        this.bindMethods(['toggleCalendar', 'selectedValue']);\r\n        const lang = document.querySelector('html').lang || 'en-US';\r\n        this.dayFormat = this.dayFormat || '2-digit';\r\n        this.monthFormat = this.monthFormat || '2-digit';\r\n        this.yearFormat = this.yearFormat || 'numeric';\r\n        this.localization = new Intl.DateTimeFormat(lang, {\r\n            day: this.dayFormat,\r\n            month: this.monthFormat,\r\n            year: this.yearFormat,\r\n        });\r\n    }\r\n    firstUpdated(){\r\n        this.buildRefs();\r\n    }\r\n    render(){\r\n        return html`\r\n    <div id=\"container\" data-ref=\"wrapper\">\r\n        <div class=\"label-wrapper\">\r\n            <label class=\"textfield__label\" for=\"squid-input-${this._uid}\" data-ref=\"label\"><slot></slot>${this._showDisabled}</label>\r\n            <squid-character-count data-ref=\"counter\" ?hidden=${!this.counter} id=\"counter-${this._uid}\" }></squid-character-count>\r\n        </div>\r\n        <input class=\"textfield__input\" \r\n                type=\"${this._inputType}\" \r\n                name=\"squid-input\" \r\n                id=\"squid-input-${this._uid}\" \r\n                data-ref=\"input\"\r\n                ?disabled=${this.disabled}\r\n                ?required=${this.required}\r\n                ?readonly=${this.readonly}\r\n                value=${this.value ?this.value:''}\r\n                ?autofocus=${this.autofocus}\r\n                ?compact=${this.compact}\r\n                @input=${this.__onInput}\r\n                maxlength=\"${this.maxlength?this.maxlength:''}\"\r\n                max=\"${this.max?this.max:''}\"\r\n                minlength=\"${this.minlength?this.minlength:''}\"\r\n                min=\"${this.min?this.min:''}\"\r\n                placeholder=\"${this.placeholder?this.placeholder:''}\"\r\n                autocomplete=\"${this.autocomplete?this.autocomplete:''}\"\r\n                @click=${this.toggleCalendar}\r\n                aria-describedby=\" helpers-${this._uid} counter-${this._uid}\"\r\n                class=\"\">\r\n        <squid-helpers id=\"helpers-${this._uid}\" data-ref=\"helpers\"></squid-helpers>\r\n        <squid-calendar value='${this.value}'  class='hide' @date-selected=${this.selectedValue} @date-submit=${this.selectedValue} @date-close=${this.toggleCalendar}  data-ref=\"calendar\" id=\"calendar-${this._uid}\"></squid-calendar>\r\n    </div>\r\n        `;\r\n    }\r\n    toggleCalendar(){\r\n        const { calendar } = this.refs;\r\n        const newDate = new Date(this.value);\r\n        if(newDate != 'Invalid Date'){\r\n            calendar.value = new Date(this.value);\r\n        }\r\n        calendar.classList.toggle('hide');\r\n    }\r\n    selectedValue(){\r\n        const { calendar, input } = this.refs;\r\n        try {\r\n            input.value = this.localization.format(calendar.value);            \r\n        } catch (error) {\r\n            input.value = '';\r\n        }\r\n        this.value = input.value;\r\n        calendar.classList.toggle('hide');\r\n    }\r\n}\r\ndefineSquidElement('squid-datepicker',SquidDatepicker);\n\nexport { SquidDatepicker };\n"],"names":["css_248z","css","SquidDatepicker","SquidInput","value","lang","html","calendar","input","defineSquidElement"],"mappings":"6UAKA,IAAIA,EAAWC,2EAgBf,MAAMC,UAAwBC,CAAW,CACrC,WAAW,QAAS,CAChB,MAAO,CAAC,GAAG,MAAM,OAAQH,CAAQ,CACpC,CACD,WAAW,YAAa,CACpB,MAAO,CACH,MAAO,CACH,KAAM,OACN,QAAS,GACT,UAAW,CACP,YAAYI,EAAO,CACf,OAAGA,aAAiB,KACT,KAAK,aAAa,OAAOA,CAAK,EAElCA,CACV,EACD,cAAcA,EAAO,CACjB,OAAGA,EACQ,IAAI,KAAKA,CAAK,EAElB,IACV,CACJ,CACJ,CACb,CACK,CACD,aAAc,CACV,QACA,KAAK,YAAY,CAAC,iBAAkB,eAAe,CAAC,EACpD,MAAMC,EAAO,SAAS,cAAc,MAAM,EAAE,MAAQ,QACpD,KAAK,UAAY,KAAK,WAAa,UACnC,KAAK,YAAc,KAAK,aAAe,UACvC,KAAK,WAAa,KAAK,YAAc,UACrC,KAAK,aAAe,IAAI,KAAK,eAAeA,EAAM,CAC9C,IAAK,KAAK,UACV,MAAO,KAAK,YACZ,KAAM,KAAK,UACvB,CAAS,CACJ,CACD,cAAc,CACV,KAAK,UAAS,CACjB,CACD,QAAQ,CACJ,OAAOC;AAAAA;AAAAA;AAAAA,+DAGgD,KAAK,uCAAuC,KAAK;AAAA,gEAChD,CAAC,KAAK,uBAAuB,KAAK;AAAA;AAAA;AAAA,wBAG1E,KAAK;AAAA;AAAA,kCAEK,KAAK;AAAA;AAAA,4BAEX,KAAK;AAAA,4BACL,KAAK;AAAA,4BACL,KAAK;AAAA,wBACT,KAAK,MAAO,KAAK,MAAM;AAAA,6BAClB,KAAK;AAAA,2BACP,KAAK;AAAA,yBACP,KAAK;AAAA,6BACD,KAAK,UAAU,KAAK,UAAU;AAAA,uBACpC,KAAK,IAAI,KAAK,IAAI;AAAA,6BACZ,KAAK,UAAU,KAAK,UAAU;AAAA,uBACpC,KAAK,IAAI,KAAK,IAAI;AAAA,+BACV,KAAK,YAAY,KAAK,YAAY;AAAA,gCACjC,KAAK,aAAa,KAAK,aAAa;AAAA,yBAC3C,KAAK;AAAA,6CACe,KAAK,gBAAgB,KAAK;AAAA;AAAA,qCAElC,KAAK;AAAA,iCACT,KAAK,uCAAuC,KAAK,8BAA8B,KAAK,6BAA6B,KAAK,oDAAoD,KAAK;AAAA;AAAA,SAG3M,CACD,gBAAgB,CACZ,KAAM,CAAE,SAAAC,CAAQ,EAAK,KAAK,KACV,IAAI,KAAK,KAAK,KAAK,GACrB,iBACVA,EAAS,MAAQ,IAAI,KAAK,KAAK,KAAK,GAExCA,EAAS,UAAU,OAAO,MAAM,CACnC,CACD,eAAe,CACX,KAAM,CAAE,SAAAA,EAAU,MAAAC,GAAU,KAAK,KACjC,GAAI,CACAA,EAAM,MAAQ,KAAK,aAAa,OAAOD,EAAS,KAAK,CACxD,MAAC,CACEC,EAAM,MAAQ,EACjB,CACD,KAAK,MAAQA,EAAM,MACnBD,EAAS,UAAU,OAAO,MAAM,CACnC,CACL,CACAE,EAAmB,mBAAmBP,CAAe;;;;;;;;;;;;;;;;;;;;"}