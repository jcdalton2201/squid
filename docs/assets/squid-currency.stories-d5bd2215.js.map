{"version":3,"file":"squid-currency.stories-d5bd2215.js","sources":["../../dist/squid-currency/squid-currency.js"],"sourcesContent":["import { SquidInput } from '../squid-input/squid-input.js';\nimport { defineSquidElement } from '../utils/defineSquidElement.js';\n\n/**\n * @tag squid-currency\n * @summary `SquidCurrency` is an implementation of [`SquidInput`](../squid-input) with a custom mask.\n * Default amount is empty, not 0\n * Dollar sign is instantly prepended to the typed input amount upon input\n * Dollar sign is always displayed on the left side of the number\n * For amounts of less than $1, display $0.XX\n * Field does not pass value of dollar sign on submit\n * No custom number pads\n * Amount input must allow for input of <1.00 amounts\n * @prop {Boolean} dollar-only - Default value is set to false, which allows decimal value of currency. When set to true, this field does not allow decimal part of currency.\n * @example <squid-currency></squid-currency>\n */\nclass SquidCurrency extends SquidInput {\n    static get properties() {\n        return {\n            ...super.properties,\n            dollarOnly: { type: Boolean },\n        };\n    }\n    constructor() {\n        super();\n        this.bindMethod('__onInputBlur');\n        this.bindMethod('__validate');\n    }\n    async firstUpdated() {\n        this.__getInput().addEventListener('blur', this.__onInputBlur);\n        this.__getInput().addEventListener('change', this.__validate);\n        this.isCentSet = false;\n    }\n    /**\n     * Blur event on the input field\n     * @param {Event} evt blur event\n     */\n    __onInputBlur(evt) {\n        if (evt.currentTarget.value === '$') {\n            this.value = '';\n            this.setCustomValidity('');\n        } else {\n            if (evt.currentTarget.value.includes('.')) {\n                let [dollars, cents] = this.__getInput().value.split('.');\n                //If no input after decimal\n                if (cents === '') {\n                    cents = '00';\n                    this.value = this.value + '' + cents;\n                }\n                // If one number is entered after decimal\n                else if (cents.length === 1) {\n                    cents += '0';\n                    this.value = this.value + '0';\n                }\n                evt.target.value = dollars + '.' + cents;\n            }\n        }\n    }\n    /**\n     * Run custom validation against the input's value\n     */\n    __validate() {\n        const { validityMessages } = this.__getHelper();\n        if (this.max && +this.cleanValue > +this.max) {\n            this.setCustomValidity(\n                validityMessages.get('rangeOverflow').message\n            );\n        } else if (this.min && +this.cleanValue < +this.min) {\n            this.setCustomValidity(\n                validityMessages.get('rangeOverflow').message\n            );\n        } else {\n            this.setCustomValidity('');\n        }\n    }\n    /**\n     * Overwrite the input event\n     * @param {Event} evt input event\n     */\n    __onInput() {\n        const removeLeadingZeros = /^0+/;\n        const notNumber = this.dollarOnly ? /[^\\d]+/g : /[^\\d.]+/g;\n        const currencyPattern = /^(0|0?[1-9]\\d*)\\.\\d\\d\\d\\d*$/;\n        const threeDigitGroupings = /\\B(?=(\\d{3})+(?!\\d))/g;\n        const input = this.__getInput();\n        let maskedValue = input.value.replace(notNumber, '');\n        if (maskedValue[0] === '0' && maskedValue.length > 1) {\n            maskedValue = maskedValue.replace(removeLeadingZeros, '');\n        }\n        if (maskedValue.includes('.')) {\n            let [dollars, cents] = maskedValue.split('.');\n            //Prefix with 0 if decimal is entered in the first position\n            if (dollars === '') {\n                dollars = '0';\n            }\n            maskedValue = dollars + '.' + cents;\n            if (maskedValue.match(currencyPattern)) {\n                maskedValue = dollars + '.' + cents.substring(0, 2);\n            }\n        }\n        this.cleanValue = maskedValue;\n        maskedValue = maskedValue.replace(threeDigitGroupings, ',');\n        this.value = this.cleanValue;\n        input.value = '$' + maskedValue;\n        this.requestUpdate();\n    }\n    setDollorSign(){\n        const removeLeadingZeros = /^0+/;\n        const notNumber = this.dollarOnly ? /[^\\d]+/g : /[^\\d.]+/g;\n        const currencyPattern = /^(0|0?[1-9]\\d*)\\.\\d\\d\\d\\d*$/;\n        const threeDigitGroupings = /\\B(?=(\\d{3})+(?!\\d))/g;\n        const input = this.renderRoot.querySelector('input');\n        let maskedValue = input.value.replace(notNumber, '');\n        if (maskedValue[0] === '0' && maskedValue.length > 1) {\n            maskedValue = maskedValue.replace(removeLeadingZeros, '');\n        }\n        if (maskedValue.includes('.')) {\n            let [dollars, cents] = maskedValue.split('.');\n            //Prefix with 0 if decimal is entered in the first position\n            if (dollars === '') {\n                dollars = '0';\n            }\n            maskedValue = dollars + '.' + cents;\n            if (maskedValue.match(currencyPattern)) {\n                maskedValue = dollars + '.' + cents.substring(0, 2);\n            }\n        }\n        this.cleanValue = maskedValue;\n        maskedValue = maskedValue.replace(threeDigitGroupings, ',');\n        this.value = '$' + maskedValue;\n    }\n    updated(changedProperties){\n        if (changedProperties.has('value')) {\n            this.setDollorSign();\n        }\n    }\n}\ndefineSquidElement('squid-currency', SquidCurrency);\n\nexport { SquidCurrency };\n"],"names":["SquidCurrency","SquidInput","evt","dollars","cents","validityMessages","removeLeadingZeros","notNumber","currencyPattern","threeDigitGroupings","input","maskedValue","changedProperties","defineSquidElement"],"mappings":"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"}