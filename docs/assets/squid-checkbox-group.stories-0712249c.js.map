{"version":3,"file":"squid-checkbox-group.stories-0712249c.js","sources":["../../dist/squid-checkbox-group/squid-checkbox-group.js"],"sourcesContent":["import { css, html } from 'lit';\nimport { BaseElement } from '../utils/baseElement.js';\nimport { defineSquidElement } from '../utils/defineSquidElement.js';\nimport { findParentForm } from '../utils/findParentForm.js';\nimport { emitEvent } from '../utils/squidEvents.js';\n\nvar css_248z = css`:host{border:0;display:block;margin-bottom:2rem;outline:0;padding:0}.fieldset{border:0;margin-bottom:0;outline:0;padding:0}.fieldset__legend{font-size:16px;font-weight:600;line-height:1.5em;margin-bottom:24px}.fieldset__legend [class*=__helper--error]{font-size:12px;font-weight:400;line-height:1.5em;margin-top:.25rem;padding:0}.fieldset .form-field:last-of-type{margin-bottom:0}`;\n\n/**\n * @prop {String} legend - Set the fieldset's legend text. Reflected as a property.\n * @prop {String} tagName - By default set to `squid-checkbox`. This tells the component what tag name to check for changes on. Must be set before the element is created. After that, changes will cause unexpected behavior.\n * @event squid-change - A [`CustomEvent`](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent) emitted each time a new value is comitted. The event's `detail` property will contain the newly comitted value.  This value will always be an array.\n * @tag squid-checkbox-group\n * @summary Creates an accessible checkbox group using [`SquidCheckbox`](../squid-checkbox) or a similar component.\n\nThe `SquidCheckbox` element is an implementation of the [checkbox element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox).\n\n> Checkboxes are used to select a single item or multiple items. A checkbox has two selection states: unselected and selected.\n> The difference between radio buttons and checkboxes is that a radio button is for a single selection from a set of options and a checkbox allows for multiple selections from a set of options.\n> The main difference between a toggle and a checkbox is that the [toggle switch](../squid-toggle) is for action and checkbox is for status.\n * @example <squid-checkbox-group legend=\"Favorite Star Wars Movies\">\n  <squid-checkbox value=\"The Phantom Menace\" disabled>The Phantom Menace</squid-checkbox>\n  <squid-checkbox value=\"Attack of the Clones\" disabled>Attack of the Clones</squid-checkbox>\n  <squid-checkbox value=\"Revenge of the Sith\" disabled>Revenge of the Sith</squid-checkbox>\n  <squid-checkbox value=\"A New Hope\">A New Hope</squid-checkbox>\n  <squid-checkbox value=\"The Empire Strikes Back\">The Empire Strikes Back</squid-checkbox>\n  <squid-checkbox value=\"Return of the Jedi\">Return of the Jedi</squid-checkbox>\n  <squid-checkbox value=\"The Force Awakens\">The Force Awakens</squid-checkbox>\n  <squid-checkbox value=\"The Last Jedi\">The Last Jedi</squid-checkbox>\n  <squid-checkbox value=\"Rogue One\">Rogue One</squid-checkbox>\n  <squid-checkbox value=\"Solo\">Solo</squid-checkbox>\n</squid-checkbox-group>\n * \n */\nclass SquidCheckboxGroup extends BaseElement{\n    static get styles() {\n        return [css_248z];\n    }\n    static get properties() {\n        return {\n            legend: { type:String },\n            required: { type: Boolean },\n        };\n    }\n    constructor() {\n        super();\n        this.bindMethods(['__onChange']);\n        const {form} = this;\n        this.addEventListener('keydown', evt => {\n            if(form && evt.code === 'Enter') {\n                form.dispatchEvent(new CustomEvent('submit'));\n            }\n        });\n        this.addEventListener('changed',this.__onChange);\n\n    }\n    /**\n     * @returns {HTMLElement}\n     */\n    get form() {\n        this._form = this._form || findParentForm(this);\n        return this._form;\n    }\n    /** Get all checked checkboxes */\n    get checkedElements() {\n        return this.querySelectorAll(`${this.constructor.childTag}[checked]`);\n    }\n    /** Get all child checkboxes */\n    get elements() {\n        return [...this.querySelectorAll(`${this.constructor.childTag}`)];\n    }\n    /** Return the value of all checked squid-checkboxes */\n    get value() {\n        return [...this.checkedElements].map(checkbox => checkbox.value);\n    }\n    /**\n     * Custom change event from checkbox\n     * @param {Event} evt change Event\n     */\n    __onChange(evt){\n        evt.stopImmediatePropagation();\n        emitEvent('group-changed',this.value,this);\n    }\n    render() {\n        return html`<fieldset class=\"fieldset\" data-ref=\"fieldset\">\n            <legend class=\"fieldset__legend\" data-ref=\"legend\">\n                ${this.legend}\n            </legend>\n            <div\n                class=\"checkbox-group\"\n                data-ref=\"checkboxGroup\"\n                aria-describedby=\"helpers\"\n            >\n                <slot></slot>\n            </div>\n        </fieldset>`;\n    }\n}\nSquidCheckboxGroup.childTag = 'squid-checkbox';\ndefineSquidElement('squid-checkbox-group', SquidCheckboxGroup);\n\nexport { SquidCheckboxGroup };\n"],"names":["css_248z","css","SquidCheckboxGroup","BaseElement","form","evt","findParentForm","checkbox","emitEvent","html","defineSquidElement"],"mappings":"uPAMA,IAAIA,EAAWC,gYA4Bf,MAAMC,UAA2BC,CAAW,CACxC,WAAW,QAAS,CAChB,MAAO,CAACH,CAAQ,CACnB,CACD,WAAW,YAAa,CACpB,MAAO,CACH,OAAQ,CAAE,KAAK,MAAQ,EACvB,SAAU,CAAE,KAAM,OAAS,CACvC,CACK,CACD,aAAc,CACV,QACA,KAAK,YAAY,CAAC,YAAY,CAAC,EAC/B,KAAM,CAAC,KAAAI,CAAI,EAAI,KACf,KAAK,iBAAiB,UAAWC,GAAO,CACjCD,GAAQC,EAAI,OAAS,SACpBD,EAAK,cAAc,IAAI,YAAY,QAAQ,CAAC,CAE5D,CAAS,EACD,KAAK,iBAAiB,UAAU,KAAK,UAAU,CAElD,CAID,IAAI,MAAO,CACP,YAAK,MAAQ,KAAK,OAASE,EAAe,IAAI,EACvC,KAAK,KACf,CAED,IAAI,iBAAkB,CAClB,OAAO,KAAK,iBAAiB,GAAG,KAAK,YAAY,mBAAmB,CACvE,CAED,IAAI,UAAW,CACX,MAAO,CAAC,GAAG,KAAK,iBAAiB,GAAG,KAAK,YAAY,UAAU,CAAC,CACnE,CAED,IAAI,OAAQ,CACR,MAAO,CAAC,GAAG,KAAK,eAAe,EAAE,IAAIC,GAAYA,EAAS,KAAK,CAClE,CAKD,WAAWF,EAAI,CACXA,EAAI,yBAAwB,EAC5BG,EAAU,gBAAgB,KAAK,MAAM,IAAI,CAC5C,CACD,QAAS,CACL,OAAOC;AAAAA;AAAAA,kBAEG,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUlB,CACL,CACAP,EAAmB,SAAW,iBAC9BQ,EAAmB,uBAAwBR,CAAkB;;;;;;;;;;;;"}