{"version":3,"file":"squid-input-base-b6539e8b.js","sources":["../../dist/squid-input-base/squid-input-base.js"],"sourcesContent":["import { BaseElement } from '../utils/baseElement.js';\nimport { findParentForm } from '../utils/findParentForm.js';\n\nclass SquidInputBase extends BaseElement {\r\n    static get formAssociated() {\r\n        return true;\r\n    }\r\n    constructor() {\r\n        super();\r\n        this.internals = this.attachInternals();\r\n        this._uid = btoa(Math.floor(Math.random()*100000)).replace(/=/gi,'');\r\n        this.bindMethods(['__onFormReset','__getInput','__getHelper']);\r\n        const {form} = this;\r\n        this.addEventListener('keydown', evt => {\r\n            if(form && evt.code === 'Enter') {\r\n                form.dispatchEvent(new CustomEvent('submit'));\r\n            }\r\n        });\r\n        if(form) {\r\n            form.addEventListener('reset', this.__onFormReset);\r\n        }\r\n    }\r\n    /**\r\n     * @returns {HTMLElement}\r\n     */\r\n    get form() {\r\n        this._form = this._form || findParentForm(this);\r\n        return this._form;\r\n    }\r\n    /**\r\n     * Proxy input checkValidity\r\n     */\r\n    get checkValidity() {\r\n        const input = this.__getInput();\r\n        return input.checkValidity.bind(input);\r\n    }\r\n    /**\r\n     * proxy input validity\r\n     */\r\n    get validity() {\r\n        const input = this.__getInput();\r\n        return input ? input.validity: {};\r\n    }\r\n    /**\r\n     * proxy input validationMessage\r\n     * @returns {String}\r\n     */\r\n    get validationMessage() {\r\n        const input = this.__getInput();\r\n        return input ? input.validationMessage : null;\r\n    }\r\n    /**\r\n     * proxy input willValidate\r\n     * @returns {Boolean}\r\n     */\r\n    get willValidate() {\r\n        const input = this.__getInput();\r\n        return input ? input.willValidate: null;\r\n    }\r\n    /**\r\n     * proxy blur function\r\n     */\r\n    blur() {\r\n        const input = this.__getInput();\r\n        if(input){\r\n            input.blur();\r\n        }\r\n    }\r\n    /**\r\n     * proxy click function\r\n     */\r\n    click() {\r\n        const input = this.__getInput();\r\n        if(input) {\r\n            input.click();\r\n        }\r\n    }\r\n    /**\r\n     * proxy focus function\r\n     */\r\n    focus() {\r\n        const input = this.__getInput();\r\n        if(input){\r\n            input.focus();\r\n        }\r\n    }\r\n    /**\r\n     * Change the default error message\r\n     * @param {String} key the key of the error message\r\n     * @param {String} message the new error message\r\n     * @returns {String} the new error message\r\n     */\r\n    setErrorMessage(key, message) {\r\n        const helpers = this.__getHelper();\r\n        return helpers ? helpers.setErrorMessage(key, message) : null;\r\n    }\r\n    /**\r\n     * \r\n     * @param {String} message message to be set\r\n     */\r\n    setCustomValidity(message = '') {\r\n        const input = this.__getInput();\r\n        const helpers = this.__getHelper();\r\n        if(!message) {\r\n            message = '';\r\n        }\r\n        if(input){\r\n            input.setCustomValidity(message);\r\n        }\r\n        if(helpers){\r\n            helpers.setCustomError(message);\r\n        }\r\n\r\n    }\r\n    /**\r\n     * Set the element's helper text\r\n     * @param {String} value Helper Text\r\n     */\r\n    setHelper(value) {\r\n        const helpers = this.__getHelper();\r\n        if(helpers) {\r\n            helpers.setHelperText(value);\r\n        }\r\n    }\r\n\r\n    __onFormReset() {\r\n        this.value = '';\r\n    }\r\n    /**\r\n     * @returns {HTMLInputElement}\r\n     */\r\n    __getInput(){\r\n        if(this.renderRoot){\r\n            return this.renderRoot.querySelector('input');\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @returns {HTMLElement}\r\n     */\r\n    __getHelper(){\r\n        return this.renderRoot.querySelector('squid-helpers');\r\n    }\r\n}\n\nexport { SquidInputBase };\n"],"names":["SquidInputBase","BaseElement","form","evt","findParentForm","input","key","message","helpers","value"],"mappings":"+FAGA,MAAMA,UAAuBC,CAAY,CACrC,WAAW,gBAAiB,CACxB,MAAO,EACV,CACD,aAAc,CACV,QACA,KAAK,UAAY,KAAK,kBACtB,KAAK,KAAO,KAAK,KAAK,MAAM,KAAK,OAAQ,EAAC,GAAM,CAAC,EAAE,QAAQ,MAAM,EAAE,EACnE,KAAK,YAAY,CAAC,gBAAgB,aAAa,aAAa,CAAC,EAC7D,KAAM,CAAC,KAAAC,CAAI,EAAI,KACf,KAAK,iBAAiB,UAAWC,GAAO,CACjCD,GAAQC,EAAI,OAAS,SACpBD,EAAK,cAAc,IAAI,YAAY,QAAQ,CAAC,CAE5D,CAAS,EACEA,GACCA,EAAK,iBAAiB,QAAS,KAAK,aAAa,CAExD,CAID,IAAI,MAAO,CACP,YAAK,MAAQ,KAAK,OAASE,EAAe,IAAI,EACvC,KAAK,KACf,CAID,IAAI,eAAgB,CAChB,MAAMC,EAAQ,KAAK,aACnB,OAAOA,EAAM,cAAc,KAAKA,CAAK,CACxC,CAID,IAAI,UAAW,CACX,MAAMA,EAAQ,KAAK,aACnB,OAAOA,EAAQA,EAAM,SAAU,EAClC,CAKD,IAAI,mBAAoB,CACpB,MAAMA,EAAQ,KAAK,aACnB,OAAOA,EAAQA,EAAM,kBAAoB,IAC5C,CAKD,IAAI,cAAe,CACf,MAAMA,EAAQ,KAAK,aACnB,OAAOA,EAAQA,EAAM,aAAc,IACtC,CAID,MAAO,CACH,MAAMA,EAAQ,KAAK,aAChBA,GACCA,EAAM,KAAI,CAEjB,CAID,OAAQ,CACJ,MAAMA,EAAQ,KAAK,aAChBA,GACCA,EAAM,MAAK,CAElB,CAID,OAAQ,CACJ,MAAMA,EAAQ,KAAK,aAChBA,GACCA,EAAM,MAAK,CAElB,CAOD,gBAAgBC,EAAKC,EAAS,CAC1B,MAAMC,EAAU,KAAK,cACrB,OAAOA,EAAUA,EAAQ,gBAAgBF,EAAKC,CAAO,EAAI,IAC5D,CAKD,kBAAkBA,EAAU,GAAI,CAC5B,MAAMF,EAAQ,KAAK,aACbG,EAAU,KAAK,cACjBD,IACAA,EAAU,IAEXF,GACCA,EAAM,kBAAkBE,CAAO,EAEhCC,GACCA,EAAQ,eAAeD,CAAO,CAGrC,CAKD,UAAUE,EAAO,CACb,MAAMD,EAAU,KAAK,cAClBA,GACCA,EAAQ,cAAcC,CAAK,CAElC,CAED,eAAgB,CACZ,KAAK,MAAQ,EAChB,CAID,YAAY,CACR,OAAG,KAAK,WACG,KAAK,WAAW,cAAc,OAAO,EAEzC,IACV,CAID,aAAa,CACT,OAAO,KAAK,WAAW,cAAc,eAAe,CACvD,CACL"}