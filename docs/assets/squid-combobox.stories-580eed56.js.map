{"version":3,"file":"squid-combobox.stories-580eed56.js","sources":["../../dist/squid-combobox/squid-combobox.js"],"sourcesContent":["import { css, html } from 'lit';\nimport { SquidInputBase } from '../squid-input-base/squid-input-base.js';\nimport { defineSquidElement } from '../utils/defineSquidElement.js';\n\nvar css_248z = css`squid-helpers{color:var(--color-alert-error,#de2131)}label{color:var(--dark-gray,#4d4d4d);font-size:.75rem;letter-spacing:.5px;margin-bottom:var(--padding-small,4px);opacity:.9}.combobox-wrapper{font-size:1rem;position:relative}.combobox-wrapper input{background-image:none;border:2px solid var(--gray-default,#999);border-radius:var(--radius-default,4px);box-shadow:none;font-size:1rem;height:var(--height-default,1rem);line-height:1.5;margin:0;padding:var(--padding-default,8px);width:auto}.combobox-wrapper input:disabled{cursor:not-allowed}.combobox-wrapper input:read-only{cursor:not-allowed}.combobox-wrapper input.textfield__input--error{border:2px solid var(--color-alert-error,#de2131)}.combobox-wrapper .grid{background:#fff;border:1px solid #1a1a1a;display:none;list-style:none;margin:9px 0 0;min-width:230px;padding:0;position:absolute;top:1.7em;z-index:1}.combobox-wrapper .grid[open]{display:block}.combobox-wrapper .grid .result-row{cursor:default;margin:0;padding:2px}.combobox-wrapper .grid .result-row.active-decendant,.combobox-wrapper .grid .result-row:hover{background-color:#d1defa}.combobox-wrapper .grid .result-row:focus{background-color:#d1defa;outline:1px auto webkit-focus-ring-color}`;\n\n/**\n * @tag squid-combobox\n * @summary A combobox is a combination of input element and a select element much like a [datalist](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist), but with some subtle differences. The W3C defines a combobox as:\n\n> A combobox is a widget made up of the combination of two distinct elements: 1) a single-line textbox, and 2) an associated pop-up element for helping users set the value of the textbox. The popup may be a listbox, grid, tree, or dialog. Many implementations also include a third optional element -- a graphical button adjacent to the textbox, indicating the availability of the popup. Activating the button displays the popup if suggestions are available.\n_[-source](https://www.w3.org/TR/wai-aria-practices/#combobox)_\n * @prop {Boolean} disabled - A proxy for the input disabled attribute. Reflected as a property. \n * @prop {Boolean} required - A proxy for the input disabled attribute. Reflected as a property. \n * @prop {Boolean} autofocus -  A proxy for the input autofocus attribute. Reflected as a property. \n * @prop {String} tooltip -  Sets a tooltip on the combobox label using [`SquidTooltip`](../squid-tooltip). Reflected as a property. \n * @prop {String} placeholder -  A proxy for the input placeholder attribute. Reflected as a property. \n * @prop {String} size -  Can set the size on the input. Reflected as a property. \n * @prop {String} value -  Sets the input's value and emits an `squid-change` event when updated. Reflected as a property. \n * @prop {String} datalabel -  Set the string to tell you what property you wish to show in your object array\n * @prop {String} datavalue -  Set the string to tell you what property you wish to be your key in your object array\n * @prop {Array} data -  This is the data set you wish to show in the popdown.  It can be an Array of Strings\nor an Array of objects with datalabel and datavalue attributes set\n * @event squid-change - A [`CustomEvent`](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent) emitted each time a new value is comitted. The event's `detail` property will contain the newly comitted value. \n * @example <squid-combobox name=\"world\" placeholder=\"Harry Potter characters\">\n  <label slot=\"label\">Favorite Harry Potter Character</label>\n  <option value=\"ME\">Harry Potter</option>\n  <option value=\"Ron Weasley\">Ron Weasley</option>\n  <option value=\"Hermione Granger\">Hermione Granger</option>\n  <option value=\"Albus Dumbledore\">Albus Dumbledore</option>\n  <option value=\"Severus Snape\">Severus Snape</option>\n  <option value=\"Sirius Black\">Sirius Black</option>\n  <option value=\"Neville 'freaking' Longbottom\">Neville Longbottom</option>\n  <option value=\"Voldemort\">He Who Must Not Be Named</option>\n</squid-combobox>\n */\nclass SquidCombobox extends SquidInputBase {\n    static get styles() {\n        return [css_248z];\n    }\n    static get properties() {\n        return {\n            value:{\n                type:String,\n                attribute:true,\n                reflect:true},\n            disabled:{type:Boolean},\n            required:{type:Boolean},\n            readonly:{type:Boolean},\n            autofocus:{type:Boolean},\n            datalabel:{type:String,attribute:true,},\n            datavalue:{type:String,attribute:true}\n        };\n    }\n    constructor() {\n        super();\n        this.bindMethods(['_openOptions','_closeOptions','_keyDown', '_selectNext','_selectPrevious','_keyInput','_selectValue',]);\n        this._data = [];\n        this._displayData = [];\n        this.activeElemen = null;\n        this.addEventListener('blur', this._closeOptions);\n    }\n    set value(value) {\n        if(this.renderRoot.querySelector('input')){\n            const oldValue = this.renderRoot.querySelector('input').value;\n            if(value !== oldValue) {\n                if(this._objectData){\n                    const objValue = [...this._objectData.values()].indexOf(value);\n                    this.renderRoot.querySelector('input').value = [...this._objectData.keys()][objValue];\n                } else {\n                    this.renderRoot.querySelector('input').value = value; \n                }\n            }\n            this.dispatchEvent(new CustomEvent('squid-input-change'));\n        }\n    }\n    get value(){\n        if(this.renderRoot.querySelector('input')){\n            if(this._objectData){\n                return this._objectData.get(this.renderRoot.querySelector('input').value);\n            }\n            return this.renderRoot.querySelector('input').value;\n        }\n        return '';\n    }\n    \n    set data(value){\n        \n        let oldValue = this._data;\n        this._objectData = null;\n        if(value.find(item => typeof item === 'object')) {\n            if(!this.datalabel || !this.datavalue){\n                console.error(`We must have a ${this.datalabel?'':' datalabel '} ${this.datavalue?'':' datavalue '}`);\n            }\n            this._objectData = new Map();\n            value.forEach(item => this._objectData.set(item[this.datalabel],item[this.datavalue]));\n            this._data = [...this._objectData.keys()];\n        } else {\n            this._data = value;\n        }\n        this._displayData = this._data;\n        this.requestUpdate('data',oldValue);\n    }\n    firstUpdated(){\n        this.buildRefs();\n        \n    }\n    render(){\n        return html`\n<div id=\"container\" data-ref=\"wrapper\">\n    <label for=\"\" id='${this.id}-label' class='combobox-label'><slot name='label'></slot></label>\n    <div class='combobox-wrapper'>\n        <div id='${this.id}-combobox'>\n            <input type='text' role=\"combobox\"\n            aria-labelledby='${this.id}-label'\n            aria-haspopup=\"grid\"\n            aria-expanded=\"false\"\n            aria-autocomplete=\"list\"\n            aria-controls=\"ex1-grid\"\n            id=${this.id}-input\n            data-ref=\"input\"\n            ?disabled=${this.disabled}\n            ?required=${this.required}\n            ?readonly=${this.readonly}\n            ?autofocus=${this.autofocus}\n\n            @input=${this._keyInput}\n            @keydown=${this._keyDown}\n            aria-describedby=\"helpers-${this._uid}\"\n            >\n            <squid-helpers id=\"helpers-${this._uid}\" data-ref=\"helpers\"></squid-helpers>\n        </div>\n        <div aria-labelledby=\"${this.id}-label\"\n            role=\"grid\"\n            data-ref=\"optionsList\"\n            id=\"${this.id}-grid\"\n            class=\"grid hidden\">\n            ${this._displayData.map((option, index) => html`\n            <div tabindex=\"-1\" class=\"result-row\" role=\"row\" id=\"result-row-${index}\" @click=${this._selectValue}>\n                ${option}\n            </div>`)}\n        </div>\n    </div>\n</div> \n        `;\n    }\n    /**\n       * Open the option grid\n       */\n    _openOptions(){\n        if(!this.disabled){\n            const { optionsList, input } = this.refs;\n            optionsList.setAttribute('open', 'open');\n            input.setAttribute('aria-expanded', 'true');\n        }\n    }\n    /**\n       * Closes the option grid\n       */\n    _closeOptions(){\n        if(!this.disabled){\n            const { optionsList, input } = this.refs;\n            optionsList.removeAttribute('open');\n            input.setAttribute('aria-expanded', 'false');\n        }\n    }\n    /**\n     * Capture the key down event\n     * @param {Event} evt keydown event\n     */\n    _keyDown(evt){\n        const { optionsList } = this.refs;\n        if(optionsList.hasAttribute('open')){\n            if(evt.key === 'ArrowDown' || evt.key === 'ArrowRight'){\n                this._selectNext();\n            }\n            if(evt.key === 'ArrowUp'|| evt.key === 'ArrowLeft'){\n                this._selectPrevious();\n            }\n            if(evt.key === 'Enter'){\n                const { input } = this.refs;\n                input.value = this._displayData[this.activeElement];\n                this._closeOptions();\n            }\n        }\n        // } else {\n        //     this._openOptions();\n        // }\n        if(evt.key === 'Escape'){\n            const { input } = this.refs;\n            input.value = '';\n            this._closeOptions();\n        }\n    }\n    /**\n     * \n     */\n    _selectPrevious() {\n        const elements = this.shadowRoot.querySelector('.active-decendant');\n        if(elements){\n            elements.classList.remove('active-decendant');\n        }\n        if(this.activeElement === undefined){\n            this.activeElement = this._displayData.length - 1;\n        } else {\n            if(this.activeElement === 0) {\n                this.activeElement = this._displayData.length - 1;\n            } else {\n                this.activeElement--;\n            }\n        }\n        this.shadowRoot.querySelectorAll('.result-row').item(this.activeElement).classList.add('active-decendant');\n    }\n    /**\n     * \n     * \n     * @return {Element} new active element\n     */\n    _selectNext() {\n        const elements = this.shadowRoot.querySelector('.active-decendant');\n        if(elements){\n            elements.classList.remove('active-decendant');\n        }\n        if(this.activeElement === undefined){\n            this.activeElement = 0;\n        } else {\n            if(this.activeElement === this._displayData.length - 1) {\n                this.activeElement = 0;\n            } else {\n                this.activeElement++;\n            }\n        }\n        this.shadowRoot.querySelectorAll('.result-row').item(this.activeElement).classList.add('active-decendant');\n    }\n\n    /**\n     * \n     * @param {Event} evt Input value of the key\n     */\n    _keyInput(evt){\n        const { optionsList, input } = this.refs;\n        const oldValue = this._displayData;\n        if(!optionsList.hasAttribute('open')){\n            if(input.value && evt.key !== 'ArrowDown' && evt.key !== 'ArrowUp'){\n                this._openOptions();\n            }\n        }\n        this._displayData = this._data.filter(label => {\n            return label.toLowerCase().includes(input.value.toLowerCase());\n        });\n        if(this._displayData.length === 0){\n            this._closeOptions();\n        }\n        this.activeElement = undefined;\n        const elements = this.shadowRoot.querySelector('.active-decendant');\n        if(elements){\n            elements.classList.remove('active-decendant');\n        }\n        this.requestUpdate('_displayData',oldValue);\n    }\n\n    /**\n     * the click event for a selected value\n     * @param {MouseEvent} evt click event\n     */\n    _selectValue(evt){\n        const item = parseInt(evt.currentTarget.id.replace('result-row-',''));\n        const { input } = this.refs;\n        input.value = this._displayData[item];\n        this.activeElement = undefined;\n        this._closeOptions();\n    }\n\n}\ndefineSquidElement('squid-combobox',SquidCombobox);\n\nexport { SquidCombobox };\n"],"names":["css_248z","css","SquidCombobox","SquidInputBase","value","oldValue","objValue","item","html","option","index","optionsList","input","evt","elements","label","defineSquidElement"],"mappings":"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"}