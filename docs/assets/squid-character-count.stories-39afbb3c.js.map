{"version":3,"file":"squid-character-count.stories-39afbb3c.js","sources":["../../dist/squid-character-count/squid-character-count.js"],"sourcesContent":["import { css, html } from 'lit';\nimport { defineSquidElement } from '../utils/defineSquidElement.js';\nimport { findSahdowRoot } from '../utils/findShadowRoot.js';\nimport { BaseElement } from '../utils/baseElement.js';\n\nvar css_248z = css``;\n\n/**\n * @prop max {Number} - The denomenator in the current/total fraction. Reflected as a property.\n * @prop count {Number} - he current character count. Reflected as a property.\n * @prop id {String} - TheThe element's id, corresponds to the `aria-describedby` attribute on an `HTMLInputElement` in the same `DocumentOrShadowRoot`. The element will hook into this element and attach an event listener to look for changes. Reflected as a property.  \n * @tag squid-character-count\n * @summary The `SquidCharacterCount` is used to allow a user to track how many characters are still available in a given input.\n * @example <squid-character-count id=\"counter\" max=\"10\"></squid-character-count>\n         <input aria-describedby=\"counter\">\n*/\nclass SquidCharacterCount extends BaseElement {\n    static get styles() {\n        return [css_248z];\n    }\n    static get properties() {\n        return {\n            max:{type:Number},\n            count:{type:Number},\n            id:{type:String}\n        };\n    }\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value;\n        const selector = `[aria-describedby=\"${value}\"]`;\n        const parentHost = findSahdowRoot(this);\n        if(parentHost) {\n            setTimeout(()=>{\n                this.describes = parentHost.querySelector('input');\n                if(this.describes === null){\n                    this.describes = parentHost.querySelector('textarea');\n                }\n                this._initInput(this.describes);\n            });\n        } else {\n            setTimeout(() => {\n                this.describes = document.querySelector(selector);\n                this._initInput(this.describes);\n                this.count = this.describes ? this.describes.value.length.toString():0;\n            });\n        }\n    }\n    render(){\n        return html`\n        <span class=\"form-field--info\" data-ref=\"counter\" aria-live=\"polite\">\n            <span data-ref=\"count\">${this.count}</span>/<span data-ref=\"limit\">${this.max}</span>\n        </span>\n        `;\n    }\n    _initInput(input) {\n        if(input) {\n            this.count = input.value.length.toString();\n            input.addEventListener('input',this._watchInput.bind(this));\n            this.max = this.max || input.maxLength;\n        }\n    }\n    _watchInput(evt) {\n        this.count = evt.target.value.length || '0';\n    }\n}\ndefineSquidElement('squid-character-count',SquidCharacterCount);\n\nexport { SquidCharacterCount };\n"],"names":["css_248z","css","SquidCharacterCount","BaseElement","value","selector","parentHost","findSahdowRoot","html","input","evt","defineSquidElement"],"mappings":"oMAKA,IAAIA,EAAWC,IAWf,MAAMC,UAA4BC,CAAY,CAC1C,WAAW,QAAS,CAChB,MAAO,CAACH,CAAQ,CACnB,CACD,WAAW,YAAa,CACpB,MAAO,CACH,IAAI,CAAC,KAAK,MAAM,EAChB,MAAM,CAAC,KAAK,MAAM,EAClB,GAAG,CAAC,KAAK,MAAM,CAC3B,CACK,CACD,IAAI,IAAK,CACL,OAAO,KAAK,GACf,CACD,IAAI,GAAGI,EAAO,CACV,KAAK,IAAMA,EACX,MAAMC,EAAW,sBAAsBD,MACjCE,EAAaC,EAAe,IAAI,EAElC,WADDD,EACY,IAAI,CACX,KAAK,UAAYA,EAAW,cAAc,OAAO,EAC9C,KAAK,YAAc,OAClB,KAAK,UAAYA,EAAW,cAAc,UAAU,GAExD,KAAK,WAAW,KAAK,SAAS,CAC9C,EAEuB,IAAM,CACb,KAAK,UAAY,SAAS,cAAcD,CAAQ,EAChD,KAAK,WAAW,KAAK,SAAS,EAC9B,KAAK,MAAQ,KAAK,UAAY,KAAK,UAAU,MAAM,OAAO,SAAU,EAAC,CACrF,CANa,CAQR,CACD,QAAQ,CACJ,OAAOG;AAAAA;AAAAA,qCAEsB,KAAK,uCAAuC,KAAK;AAAA;AAAA,SAGjF,CACD,WAAWC,EAAO,CACXA,IACC,KAAK,MAAQA,EAAM,MAAM,OAAO,SAAQ,EACxCA,EAAM,iBAAiB,QAAQ,KAAK,YAAY,KAAK,IAAI,CAAC,EAC1D,KAAK,IAAM,KAAK,KAAOA,EAAM,UAEpC,CACD,YAAYC,EAAK,CACb,KAAK,MAAQA,EAAI,OAAO,MAAM,QAAU,GAC3C,CACL,CACAC,EAAmB,wBAAwBT,CAAmB;;;;"}